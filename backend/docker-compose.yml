version: '3.8'

services:
  # MongoDB Replica Set
  mongo1:
    image: mongo:7.0
    container_name: mongo1
    command: mongod --replSet rs0 --port 27017 --bind_ip_all
    ports:
      - "27017:27017"
    volumes:
      - mongo1_data:/data/db
      - $PWD/backend/mongo-init:/docker-entrypoint-initdb.d
    networks:
      - ecommerce_network

  mongo2:
    image: mongo:7.0
    container_name: mongo2
    command: mongod --replSet rs0 --port 27018 --bind_ip_all
    ports:
      - "27018:27018"
    volumes:
      - mongo2_data:/data/db
    networks:
      - ecommerce_network

  mongo3:
    image: mongo:7.0
    container_name: mongo3
    command: mongod --replSet rs0 --port 27019 --bind_ip_all
    ports:
      - "27019:27019"
    volumes:
      - mongo3_data:/data/db
    networks:
      - ecommerce_network

  # Application Node 1
  app1:
    build: .
    container_name: ecommerce_app1
    environment:
      - NODE_ID=node-1
      - PORT=5000
      - MONGO_URI=mongodb://mongo1:27017,mongo2:27018,mongo3:27019/?replicaSet=rs0
      - DATABASE_NAME=distributed_ecommerce
      - JWT_SECRET_KEY=your-super-secret-jwt-key-change-in-production
    ports:
      - "5000:5000"
    depends_on:
      - mongo1
      - mongo2
      - mongo3
    networks:
      - ecommerce_network
    volumes:
      - .:/app
    working_dir: /app

  # Application Node 2
  app2:
    build: .
    container_name: ecommerce_app2
    environment:
      - NODE_ID=node-2
      - PORT=5001
      - MONGO_URI=mongodb://mongo1:27017,mongo2:27018,mongo3:27019/?replicaSet=rs0
      - DATABASE_NAME=distributed_ecommerce
      - JWT_SECRET_KEY=your-super-secret-jwt-key-change-in-production
    ports:
      - "5001:5001"
    depends_on:
      - mongo1
      - mongo2
      - mongo3
    networks:
      - ecommerce_network
    volumes:
      - .:/app
    working_dir: /app

  # NGINX Load Balancer
  nginx:
    image: nginx:alpine
    container_name: nginx_lb
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - app1
      - app2
    networks:
      - ecommerce_network

volumes:
  mongo1_data:
  mongo2_data:
  mongo3_data:

networks:
  ecommerce_network:
    driver: bridge